// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ApplicationLog {
  id        String   @unique @default(uuid())
  level     String
  message   String
  meta      Json
  timestamp DateTime

  @@map("application_logs")
}

model AuditLog {
  id            String   @unique @default(uuid())
  table_name    String
  record_id     String
  action        String
  previous_data Json
  new_data      Json
  changed_by    String
  timestamp     DateTime

  @@map("audit_logs")
}

model Company {
  id                  String  @unique @default(uuid())
  company_name        String
  company_short_name  String?
  company_code        String?
  registration_number String
  tax_id              String
  address             String?
  city                String?
  state               String?
  country             String?
  postal_code         String?
  phone               String
  email               String
  website             String?
  is_seller           Boolean @default(false)
  is_verified         Boolean @default(false)
  seller_id           String?
  seller              Seller? @relation(fields: [seller_id], references: [id])

  industry              String?
  number_of_employees   Int?
  annual_revenue        Decimal?                @db.Decimal(20, 2)
  description           String?
  is_active             Boolean
  CompanyAdditionalInfo CompanyAdditionalInfo[]

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?

  @@map("companies")
}

model CompanyAdditionalInfo {
  id                String  @unique @default(uuid())
  company_id        String
  company           Company @relation(fields: [company_id], references: [id])
  short_description String? @db.Text
  facebook_link     String?
  twitter_link      String?
  instagram_link    String?
  linkedin_link     String?
  youtube_link      String?
  whatsapp_number   String?
  google_map_link   String? @db.Text
  vision            String? @db.Text
  mission           String? @db.Text

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?

  @@map("company_additional_info")
}

model User {
  id       String @unique @default(uuid())
  fullname String
  username String

  email             String   @unique
  password          String
  address           String?
  phone             String
  is_active         Boolean?
  is_admin          Boolean?
  is_password_reset Boolean?
  user_type         String

  UserGroups   UserGroup[]
  UserSettings UserSettings[]

  created_at   DateTime       @default(now())
  created_by   String
  created_ip   String?
  updated_at   DateTime       @updatedAt
  updated_by   String?
  updated_ip   String?
  company_id   String
  RefreshToken RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @unique @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
}

model SecurityRule {
  id          String  @unique @default(uuid())
  name        String
  description String?

  created_at                      DateTime                         @default(now())
  created_by                      String
  created_ip                      String?
  updated_at                      DateTime                         @updatedAt
  updated_by                      String?
  updated_ip                      String?
  company_id                      String
  SecurityRuleWiseMenuPermissions SecurityRuleWiseMenuPermission[]
  SecurityGroupRules              SecurityGroupRule[]

  @@map("security_rule")
}

model SecurityRuleWiseMenuPermission {
  id         String  @unique @default(uuid())
  menu_id    Int
  can_view   Boolean
  can_create Boolean
  can_update Boolean
  can_delete Boolean
  can_report Boolean

  rule_id       String
  security_rule SecurityRule @relation(fields: [rule_id], references: [id])

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("security_rule_wise_menu_permission")
}

model SecurityGroup {
  id          String  @unique @default(uuid())
  name        String
  description String?

  created_at         DateTime            @default(now())
  created_by         String
  created_ip         String?
  updated_at         DateTime            @updatedAt
  updated_by         String?
  updated_ip         String?
  company_id         String
  SecurityGroupRules SecurityGroupRule[]
  UserGroups         UserGroup[]

  @@map("security_group")
}

model SecurityGroupRule {
  id             String        @unique @default(uuid())
  group_id       String
  security_group SecurityGroup @relation(fields: [group_id], references: [id])
  rule_id        String
  security_rule  SecurityRule  @relation(fields: [rule_id], references: [id])

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("security_group_rule")
}

model UserGroup {
  id             String        @unique @default(uuid())
  user_id        String
  user           User          @relation(fields: [user_id], references: [id])
  group_id       String
  security_group SecurityGroup @relation(fields: [group_id], references: [id])

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("user_group")
}

model Menu {
  id           Int      @unique @default(autoincrement())
  title        String
  url          String?
  icon         String?
  icon_library String?
  parent_id    Int
  sequence_no  Decimal  @db.Decimal(20, 2)
  is_active    Boolean
  can_view     Boolean?
  can_create   Boolean?
  can_update   Boolean?
  can_delete   Boolean?
  can_report   Boolean?

  @@map("menus")
}

model Product {
  id             String    @unique @default(uuid())
  name           String
  slug           String    @unique
  description    String    @db.Text
  price          Decimal   @db.Decimal(10, 2)
  priceRange     Decimal?  @db.Decimal(10, 2)
  compareAtPrice Decimal?  @db.Decimal(10, 2)
  images         Json // Array of strings
  thumbnail      String
  hasVariants    Boolean   @default(false)
  stock          Decimal   @db.Decimal(10, 2)
  tags           Json // Array of strings
  rating         Float
  reviewCount    Int
  status         String // e.g., "active"
  isFeatured     Boolean   @default(false)
  isNew          Boolean   @default(false)
  onSale         Boolean   @default(false)
  salePercentage Decimal?  @db.Decimal(10, 2)
  salePrice      Decimal?  @db.Decimal(10, 2)
  saleStartDate  DateTime?
  saleEndDate    DateTime?

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  // Relations
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId String
  brand         Brand       @relation(fields: [brandId], references: [id])
  brandId       String
  seller        Seller      @relation(fields: [sellerId], references: [id])
  sellerId      String

  // One-to-many relations
  attributes     ProductAttribute[]
  variants       ProductVariant[]
  reviews        Review[]
  Wishlist       Wishlist[]
  SpecialOffer   SpecialOffer?      @relation(fields: [specialOfferId], references: [id])
  specialOfferId String?

  @@map("products")
}

model Category {
  id           String  @unique @default(uuid())
  name         String
  slug         String  @unique
  image        String?
  icon         String?
  featured     Boolean @default(false)
  productCount Int     @default(0)
  is_active    Boolean @default(true)

  created_at    DateTime      @default(now())
  created_by    String
  created_ip    String?
  updated_at    DateTime      @updatedAt
  updated_by    String?
  updated_ip    String?
  company_id    String
  // Relations
  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

model Subcategory {
  id           String @unique @default(uuid())
  name         String
  slug         String @unique
  productCount Int    @default(0)

  created_at DateTime  @default(now())
  created_by String
  created_ip String?
  updated_at DateTime  @updatedAt
  updated_by String?
  updated_ip String?
  company_id String
  // Relations
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  products   Product[]

  @@map("subcategories")
}

model Brand {
  id       String    @unique @default(uuid())
  name     String
  slug     String    @unique
  products Product[]

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("brands")
}

model ProductAttribute {
  id           String  @unique @default(uuid())
  name         String
  type         String
  value        String
  unit         String?
  displayValue String?
  options      Json? // Array of strings

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("product_attributes")
}

model ProductVariant {
  id          String  @unique @default(uuid())
  sku         String
  price       Decimal @db.Decimal(10, 2)
  stock       Decimal @db.Decimal(10, 2)
  attributes  Json // Object containing variant attributes
  images      Json // Array of image paths
  sequence_no Int     @default(0)

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("product_variants")
}

model Seller {
  id          String    @unique @default(uuid())
  name        String
  slug        String    @unique
  email       String    @unique
  phone       String?
  logo        String?
  rating      Float
  reviewCount Int
  verified    Boolean   @default(false)
  products    Product[]
  companies   Company[]

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("sellers")
}

model Review {
  id         String   @unique @default(uuid())
  userId     String
  userName   String
  userAvatar String?
  rating     Float
  title      String?
  comment    String   @db.Text
  helpful    Int      @default(0)
  createdAt  DateTime @default(now())
  variantId  String?

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("reviews")
}

model Customer {
  id             String                 @unique @default(uuid())
  first_name     String
  last_name      String
  email          String                 @unique
  phone          String?
  password       String
  is_active      Boolean                @default(true)
  orders         Order[]
  remember_token String? // For "Remember me" functionality
  email_verified DateTime? // For email verification
  refresh_tokens CustomerRefreshToken[] // For JWT refresh tokens
  addresses      CustomerAddress[] // Add this relation
  Wishlist       Wishlist[]

  created_at   DateTime       @default(now())
  created_by   String
  created_ip   String?
  updated_at   DateTime       @updatedAt
  updated_by   String?
  updated_ip   String?
  PendingOrder PendingOrder[]

  @@map("customers")
}

model CustomerRefreshToken {
  id         String   @unique @default(uuid())
  token      String   @unique
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  isRevoked  Boolean  @default(false)

  @@map("customer_refresh_tokens")
}

model Order {
  id           String      @unique @default(uuid())
  orderNumber  String      @unique
  userId       String?
  status       OrderStatus
  totalAmount  Decimal     @db.Decimal(10, 2)
  shippingCost Decimal     @db.Decimal(10, 2)
  tax          Decimal     @db.Decimal(10, 2)
  discount     Decimal?    @db.Decimal(10, 2)
  finalAmount  Decimal     @db.Decimal(10, 2)

  // Shipping details
  shippingAddress Json
  billingAddress  Json

  // Payment details
  paymentMethod String
  paymentStatus PaymentStatus

  // Tracking
  trackingNumber String?
  trackingStatus String?

  orderItems OrderItem[]

  // Make customer relation optional
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  paymentGateway          String?
  sslcommerzTransactionId String?              @unique
  paypalOrderId           String?              @unique
  paymentMetadata         Json?
  PaymentTransaction      PaymentTransaction[]

  coupon_id       String?
  coupon          Coupon?  @relation(fields: [coupon_id], references: [id])
  discount_amount Decimal? @db.Decimal(10, 2)

  @@map("orders")
}

model OrderItem {
  id         String  @unique @default(uuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  variantId  String?
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  // Snapshot of product details at time of order
  productName       String
  variantAttributes Json?

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("order_items")
}

model StockMovement {
  id        String       @unique @default(uuid())
  productId String
  variantId String?
  quantity  Decimal      @db.Decimal(10, 2)
  type      MovementType
  reference String // Order ID, Return ID, etc.
  notes     String?

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("stock_movements")
}

model UserSettings {
  id       String @unique @default(uuid())
  user_id  String
  user     User   @relation(fields: [user_id], references: [id])
  settings Json // This will store all theme and layout settings

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("user_settings")
}

model CustomerAddress {
  id         String    @unique @default(uuid())
  // Make customer relation optional
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  label      String
  firstName  String
  lastName   String
  phone      String
  email      String?
  address    String
  apartment  String?
  city       String
  state      String
  country    String
  postalCode String
  isDefault  Boolean   @default(false)

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?

  @@map("customer_addresses")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum MovementType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  DAMAGE
}

model PendingOrder {
  id            String    @unique @default(uuid())
  transactionId String    @unique
  // Make customer relation optional
  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id])
  addressId     String
  items         Json
  couponId      String?
  couponCode    String?
  subtotal      Decimal   @db.Decimal(10, 2)
  shippingCost  Decimal   @db.Decimal(10, 2)
  discount      Decimal   @db.Decimal(10, 2)
  total         Decimal   @db.Decimal(10, 2)
  status        String
  paymentMethod String    @default("sslcommerz")

  coupon Coupon? @relation(fields: [couponId], references: [id])

  created_at       DateTime @default(now())
  created_by       String
  created_ip       String?
  updated_at       DateTime @updatedAt
  updated_by       String?
  updated_ip       String?
  shippingChargeId String?

  @@map("pending_orders")
}

model PaymentTransaction {
  id            String  @unique @default(uuid())
  orderId       String?
  order         Order?  @relation(fields: [orderId], references: [id])
  transactionId String  @unique
  gateway       String // sslcommerz, paypal
  amount        Decimal @db.Decimal(10, 2)
  currency      String
  status        String // success, failed, pending, cancelled
  metadata      Json? // Store gateway-specific response data

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?

  @@map("payment_transactions")
}

model Wishlist {
  id         String   @unique @default(uuid())
  userId     String
  user       Customer @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("wishlists")
}

model Banner {
  id          String    @unique @default(uuid())
  title       String?
  subtitle    String?
  image       String
  link        String?
  type        String // "main" or "offer"
  sequence_no Int       @default(0)
  is_active   Boolean   @default(true)
  start_date  DateTime?
  end_date    DateTime?

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("banners")
}

model SpecialOffer {
  id         String    @unique @default(uuid())
  title      String
  subtitle   String?
  discount   Decimal   @db.Decimal(10, 2)
  start_date DateTime
  end_date   DateTime
  is_active  Boolean   @default(true)
  image      String?
  products   Product[] // Many-to-many relation with products

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("special_offers")
}

model Coupon {
  id               String   @unique @default(uuid())
  code             String   @unique
  description      String?
  discount_type    String   @default("percentage") // percentage or fixed
  discount_amount  Decimal  @db.Decimal(10, 2)
  minimum_purchase Decimal? @db.Decimal(10, 2)
  maximum_discount Decimal? @db.Decimal(10, 2)
  start_date       DateTime
  end_date         DateTime
  usage_limit      Int? // null means unlimited
  used_count       Int      @default(0)
  is_active        Boolean  @default(true)

  // Audit fields
  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  // Relations
  Order        Order[]
  PendingOrder PendingOrder[] // Add this relation

  @@map("coupons")
}

model ShippingCharge {
  id          String   @unique @default(uuid())
  name        String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  is_active   Boolean  @default(true)
  is_default  Boolean  @default(false)
  min_amount  Decimal? @db.Decimal(10, 2)
  max_amount  Decimal? @db.Decimal(10, 2)

  created_at DateTime @default(now())
  created_by String
  created_ip String?
  updated_at DateTime @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("shipping_charges")
}

model Page {
  id         String        @unique @default(uuid())
  title      String
  slug       String        @unique
  content    String        @db.Text
  meta_title String?
  meta_desc  String?
  is_active  Boolean       @default(true)
  sections   PageSection[]
  created_at DateTime      @default(now())
  created_by String
  created_ip String?
  updated_at DateTime      @updatedAt
  updated_by String?
  updated_ip String?
  company_id String

  @@map("pages")
}

model PageSection {
  id          String   @unique @default(uuid())
  page_id     String
  page        Page     @relation(fields: [page_id], references: [id])
  title       String
  content     String   @db.Text
  image       String?
  sequence_no Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  created_by  String
  created_ip  String?
  updated_at  DateTime @updatedAt
  updated_by  String?
  updated_ip  String?
  company_id  String

  @@map("page_sections")
}

model Faq {
  id          String   @unique @default(uuid())
  question    String
  answer      String   @db.Text
  category    String?
  sequence_no Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  created_by  String
  created_ip  String?
  updated_at  DateTime @updatedAt
  updated_by  String?
  updated_ip  String?
  company_id  String

  @@map("faqs")
}
